{"version":3,"sources":["library/postCsrf.js","components/login.component.js","components/signup.component.js","components/dashboard.component.js","library/getAuth.js","App.js","serviceWorker.js","index.js"],"names":["postCsrf","url","data","append","csrfKey","csrfToken","console","log","fetch","method","body","redirect","then","response","text","result","updateToken","catch","error","Login","props","state","login","password","handleChange","bind","handleSubmit","event","this","target","id","value","formdata","FormData","history","push","preventDefault","onSubmit","className","type","placeholder","onChange","required","htmlFor","href","Component","SignUp","fullname","school","city","phone","username","email","Object","keys","forEach","key","Dashboard","_isMounted","loginState","ans","res","json","setState","to","App","exact","path","component","Boolean","window","location","hostname","match","document","getElementById","getAttribute","val","Key","Value","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e97e2279.chunk.js","sourcesContent":["import {csrfKey,csrfToken,updateToken} from \"../index\";\n\nexport default function postCsrf(url,data) {\n    data.append(csrfKey,csrfToken);\n    console.log(csrfKey,csrfToken);\n    return fetch(url, {\n        method: 'POST',\n        body: data,\n        redirect: 'follow'\n        })\n        .then(response => response.text())\n        .then(result => {\n            console.log(result);\n            updateToken(result.csrfKey,result.csrfToken);\n            return result;\n        })\n        .catch(error => console.log('error', error));\n}","import React, { Component } from \"react\";\nimport postCsrf from \"../library/postCsrf.js\";\n\nexport default class Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {login: '',password:''};\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n    \n    handleChange(event) {\n        this.state[event.target.id]=event.target.value;\n    }\n\n    handleSubmit(event) {\n        let formdata = new FormData();\n        formdata.append('login',this.state.login);\n        formdata.append('password',this.state.password);\n        postCsrf(\"http://localhost:8000/login\",formdata).then(()=>{\n            this.props.history.push('/dashboard');\n        });\n        event.preventDefault();\n    }\n    \n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <h3>Sign In</h3>\n\n                <div className=\"form-group\">\n                    <label>Email/Username</label>\n                    <input id='login' type=\"text\" className=\"form-control\" placeholder=\"Enter email\" onChange={this.handleChange} required/>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Password</label>\n                    <input id='password' type=\"password\" className=\"form-control\" placeholder=\"Enter password\" onChange={this.handleChange} required/>\n                </div>\n\n                <div className=\"form-group\">\n                    <div className=\"custom-control custom-checkbox\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\n                        <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Remember me</label>\n                    </div>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\n                <p className=\"forgot-password text-right\">\n                    Forgot <a href=\"#\">password?</a>\n                </p>\n            </form>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport postCsrf from \"../library/postCsrf.js\";\n\nexport default class SignUp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {fullname:'',\n            school:'',\n            city:'',\n            phone:'',\n            username:'',\n            email:'',\n            password:''\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n    \n    handleChange(event) {\n        this.state[event.target.id]=event.target.value;\n    }\n\n    handleSubmit(event) {\n        let formdata = new FormData();\n        Object.keys(this.state).forEach(key=>{\n            formdata.append(key,this.state[key]);\n        })\n        postCsrf(\"http://localhost:8000/register\",formdata);\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <h3>Sign Up</h3>\n\n                <div className=\"form-group\">\n                    <label>Nama lengkap</label>\n                    <input id='fullname' onChange={this.handleChange} type=\"text\" className=\"form-control\" placeholder=\"Nama Lengkap\" required/>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Sekolah</label>\n                    <input id='school' onChange={this.handleChange} type=\"text\" className=\"form-control\" placeholder=\"Asal sekolah\" required/>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Asal daerah</label>\n                    <input id='city' onChange={this.handleChange} type=\"text\" className=\"form-control\" placeholder=\"Kabupaten/kota\" required/>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>No</label>\n                    <input id='phone' onChange={this.handleChange} type=\"text\" className=\"form-control\" placeholder=\"WA/Telegram\" required/>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Username</label>\n                    <input id='username' onChange={this.handleChange} type=\"text\" className=\"form-control\" placeholder=\"Username\" required/>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Email</label>\n                    <input id='email' onChange={this.handleChange} type=\"email\" className=\"form-control\" placeholder=\"Masukan email\" required/>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Password</label>\n                    <input id='password' onChange={this.handleChange} type=\"password\" className=\"form-control\" placeholder=\"Masukan password\" required/>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Sign Up</button>\n                <p className=\"forgot-password text-right\">\n                    Already registered <a href=\"#\">sign in?</a>\n                </p>\n            </form>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport isLogedIn from \"../library/getAuth\";\n\n\nexport default class Dashboard extends Component {\n    _isMounted = false;\n    constructor(props){\n        super(props);\n        this.state = {loginState:true}\n    }\n    componentDidMount(){\n        this._isMounted = true;\n        if (this._isMounted) {\n            isLogedIn(this);\n        }\n    }\n    componentWillUnmount(){\n        this._isMounted=false;\n    }\n    render () {\n        if (!this.state.loginState) {\n            return <Redirect to='/sign-in'/>\n        }\n        return (\n            <div>Contoh halaman private</div>\n        )\n    }\n}","export default function isLogedIn(ans) {\n    return fetch('http://localhost:8000/auth').then(res=>res.json()).then(result=>{\n        ans.setState({loginState: result.login})\n    })\n        .catch(error => console.log('error', error));\n}","import React from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Login from \"./components/login.component\";\nimport SignUp from \"./components/signup.component\";\nimport Dashboard from \"./components/dashboard.component\"\n\nfunction App() {\n  return (<Router>\n    <div className=\"App\">\n      <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n        <div className=\"container\">\n          <Link className=\"navbar-brand\" to={\"/sign-in\"}>positronX.io</Link>\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/sign-in\"}>Login</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/sign-up\"}>Sign up</Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n          <Switch>\n            <Route exact path='/' component={Login} />\n            <Route path=\"/sign-in\" component={Login} />\n            <Route path=\"/sign-up\" component={SignUp} />\n            <Route path=\"/dashboard\" component={Dashboard} />\n          </Switch>\n        </div>\n      </div>\n    </div></Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nvar csrfKey = document.getElementById('csrf').getAttribute('name');\nvar csrfToken = document.getElementById('csrf').getAttribute('value');\nfetch('http://localhost:8000/token').then(response=>response.json())\n.then(result=>{\n    csrfKey = result.Key;\n    csrfToken = result.Value;\n})\n\nfunction updateToken(key,val) {\n    csrfKey=key;\n    csrfToken=val;\n}\nexport {csrfKey,csrfToken,updateToken};\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}